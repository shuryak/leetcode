func countBits(n int) []int {
    result := make([]int, n+1)
    for i := 1; i <= n; i++ {
        /*
        Два соседних числа: i и i-1.
        Получим третье число такое, чтобы все разряды, заполненные единичками в
        данных соседних числах, были обращены в ноль.
        Например: i = 1011, i-1 = 1010 в двоичных представлениях, тогда третье число = 1010 = 10.
        Этого можно добиться с помощью побитовой конъюнкции.
        В result[10] уже хранится количество единиц в двоичном представлении числа 10. Их 2.
        А в i их 3.
        Тогда для получения количества единиц в двоичном представлении числа i = 1011 нужно выполнить
        result[i & (i-1)] + 1.
        Логика в том, что два соседних числа всегда отличаются наличием одной единицы в какой-то позиции, 
        эту единицу мы и восполняем с помощью +1.
        */
        // Старший бит уничтожится и мы получим число на этот порядок ниже
        result[i] = result[i & (i - 1)] + 1;
    }
    return result;
}
